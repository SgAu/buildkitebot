// Code generated by MockGen. DO NOT EDIT.
// Source: target/mockgen/github.go

// Package orgbot is a generated GoMock package.
package orgbot

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGitHubService is a mock of GitHubService interface
type MockGitHubService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceMockRecorder
}

// MockGitHubServiceMockRecorder is the mock recorder for MockGitHubService
type MockGitHubServiceMockRecorder struct {
	mock *MockGitHubService
}

// NewMockGitHubService creates a new mock instance
func NewMockGitHubService(ctrl *gomock.Controller) *MockGitHubService {
	mock := &MockGitHubService{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubService) EXPECT() *MockGitHubServiceMockRecorder {
	return m.recorder
}

// ListTeams mocks base method
func (m *MockGitHubService) ListTeams(ctx context.Context, orgName string) ([]*GitHubTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx, orgName)
	ret0, _ := ret[0].([]*GitHubTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams
func (mr *MockGitHubServiceMockRecorder) ListTeams(ctx, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockGitHubService)(nil).ListTeams), ctx, orgName)
}

// ListTeamMembers mocks base method
func (m *MockGitHubService) ListTeamMembers(ctx context.Context, orgName string, teamID GitHubTeamID, role GitHubTeamRole) ([]*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembers", ctx, orgName, teamID, role)
	ret0, _ := ret[0].([]*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamMembers indicates an expected call of ListTeamMembers
func (mr *MockGitHubServiceMockRecorder) ListTeamMembers(ctx, orgName, teamID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembers", reflect.TypeOf((*MockGitHubService)(nil).ListTeamMembers), ctx, orgName, teamID, role)
}

// CreateTeam mocks base method
func (m *MockGitHubService) CreateTeam(ctx context.Context, orgName string, team *GitHubTeam) (*GitHubTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, orgName, team)
	ret0, _ := ret[0].(*GitHubTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockGitHubServiceMockRecorder) CreateTeam(ctx, orgName, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockGitHubService)(nil).CreateTeam), ctx, orgName, team)
}

// UpdateTeam mocks base method
func (m *MockGitHubService) UpdateTeam(ctx context.Context, team *GitHubTeam) (*GitHubTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", ctx, team)
	ret0, _ := ret[0].(*GitHubTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam
func (mr *MockGitHubServiceMockRecorder) UpdateTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockGitHubService)(nil).UpdateTeam), ctx, team)
}

// DeleteTeam mocks base method
func (m *MockGitHubService) DeleteTeam(ctx context.Context, teamID GitHubTeamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam
func (mr *MockGitHubServiceMockRecorder) DeleteTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockGitHubService)(nil).DeleteTeam), ctx, teamID)
}

// AddTeamMembership mocks base method
func (m *MockGitHubService) AddTeamMembership(ctx context.Context, orgName string, teamID GitHubTeamID, email string, role GitHubTeamRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMembership", ctx, orgName, teamID, email, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTeamMembership indicates an expected call of AddTeamMembership
func (mr *MockGitHubServiceMockRecorder) AddTeamMembership(ctx, orgName, teamID, email, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMembership", reflect.TypeOf((*MockGitHubService)(nil).AddTeamMembership), ctx, orgName, teamID, email, role)
}

// DeleteTeamMembership mocks base method
func (m *MockGitHubService) DeleteTeamMembership(ctx context.Context, orgName string, teamID GitHubTeamID, email string, role GitHubTeamRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamMembership", ctx, orgName, teamID, email, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamMembership indicates an expected call of DeleteTeamMembership
func (mr *MockGitHubServiceMockRecorder) DeleteTeamMembership(ctx, orgName, teamID, email, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamMembership", reflect.TypeOf((*MockGitHubService)(nil).DeleteTeamMembership), ctx, orgName, teamID, email, role)
}

// AddTeamRepoPermission mocks base method
func (m *MockGitHubService) AddTeamRepoPermission(ctx context.Context, orgName, repoName string, teamID GitHubTeamID, permission RepoPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamRepoPermission", ctx, orgName, repoName, teamID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTeamRepoPermission indicates an expected call of AddTeamRepoPermission
func (mr *MockGitHubServiceMockRecorder) AddTeamRepoPermission(ctx, orgName, repoName, teamID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamRepoPermission", reflect.TypeOf((*MockGitHubService)(nil).AddTeamRepoPermission), ctx, orgName, repoName, teamID, permission)
}

// DeleteTeamRepoPermission mocks base method
func (m *MockGitHubService) DeleteTeamRepoPermission(ctx context.Context, orgName, repoName string, teamID GitHubTeamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamRepoPermission", ctx, orgName, repoName, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamRepoPermission indicates an expected call of DeleteTeamRepoPermission
func (mr *MockGitHubServiceMockRecorder) DeleteTeamRepoPermission(ctx, orgName, repoName, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamRepoPermission", reflect.TypeOf((*MockGitHubService)(nil).DeleteTeamRepoPermission), ctx, orgName, repoName, teamID)
}

// WalkRepos mocks base method
func (m *MockGitHubService) WalkRepos(ctx context.Context, orgName string, walkFn WalkReposFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkRepos", ctx, orgName, walkFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkRepos indicates an expected call of WalkRepos
func (mr *MockGitHubServiceMockRecorder) WalkRepos(ctx, orgName, walkFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRepos", reflect.TypeOf((*MockGitHubService)(nil).WalkRepos), ctx, orgName, walkFn)
}

// WalkReposByTeam mocks base method
func (m *MockGitHubService) WalkReposByTeam(ctx context.Context, orgName string, teamID GitHubTeamID, walkFn WalkReposFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkReposByTeam", ctx, orgName, teamID, walkFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkReposByTeam indicates an expected call of WalkReposByTeam
func (mr *MockGitHubServiceMockRecorder) WalkReposByTeam(ctx, orgName, teamID, walkFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkReposByTeam", reflect.TypeOf((*MockGitHubService)(nil).WalkReposByTeam), ctx, orgName, teamID, walkFn)
}

// RepoByName mocks base method
func (m *MockGitHubService) RepoByName(ctx context.Context, orgName, repoName string) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoByName", ctx, orgName, repoName)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoByName indicates an expected call of RepoByName
func (mr *MockGitHubServiceMockRecorder) RepoByName(ctx, orgName, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoByName", reflect.TypeOf((*MockGitHubService)(nil).RepoByName), ctx, orgName, repoName)
}

// UpdateRepoTopics mocks base method
func (m *MockGitHubService) UpdateRepoTopics(ctx context.Context, orgName, repoName string, topics []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoTopics", ctx, orgName, repoName, topics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoTopics indicates an expected call of UpdateRepoTopics
func (mr *MockGitHubServiceMockRecorder) UpdateRepoTopics(ctx, orgName, repoName, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoTopics", reflect.TypeOf((*MockGitHubService)(nil).UpdateRepoTopics), ctx, orgName, repoName, topics)
}

// ListAdmins mocks base method
func (m *MockGitHubService) ListAdmins(ctx context.Context, orgName string) ([]*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmins", ctx, orgName)
	ret0, _ := ret[0].([]*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmins indicates an expected call of ListAdmins
func (mr *MockGitHubServiceMockRecorder) ListAdmins(ctx, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmins", reflect.TypeOf((*MockGitHubService)(nil).ListAdmins), ctx, orgName)
}

// UserByEmail mocks base method
func (m *MockGitHubService) UserByEmail(ctx context.Context, orgName, email string) (*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByEmail", ctx, orgName, email)
	ret0, _ := ret[0].(*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByEmail indicates an expected call of UserByEmail
func (mr *MockGitHubServiceMockRecorder) UserByEmail(ctx, orgName, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByEmail", reflect.TypeOf((*MockGitHubService)(nil).UserByEmail), ctx, orgName, email)
}

// UserByLogin mocks base method
func (m *MockGitHubService) UserByLogin(ctx context.Context, orgName, login string) (*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByLogin", ctx, orgName, login)
	ret0, _ := ret[0].(*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByLogin indicates an expected call of UserByLogin
func (mr *MockGitHubServiceMockRecorder) UserByLogin(ctx, orgName, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByLogin", reflect.TypeOf((*MockGitHubService)(nil).UserByLogin), ctx, orgName, login)
}

// MockGitHubServiceWithStats is a mock of GitHubServiceWithStats interface
type MockGitHubServiceWithStats struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceWithStatsMockRecorder
}

// MockGitHubServiceWithStatsMockRecorder is the mock recorder for MockGitHubServiceWithStats
type MockGitHubServiceWithStatsMockRecorder struct {
	mock *MockGitHubServiceWithStats
}

// NewMockGitHubServiceWithStats creates a new mock instance
func NewMockGitHubServiceWithStats(ctrl *gomock.Controller) *MockGitHubServiceWithStats {
	mock := &MockGitHubServiceWithStats{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceWithStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubServiceWithStats) EXPECT() *MockGitHubServiceWithStatsMockRecorder {
	return m.recorder
}

// ListTeams mocks base method
func (m *MockGitHubServiceWithStats) ListTeams(ctx context.Context, orgName string) ([]*GitHubTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx, orgName)
	ret0, _ := ret[0].([]*GitHubTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams
func (mr *MockGitHubServiceWithStatsMockRecorder) ListTeams(ctx, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).ListTeams), ctx, orgName)
}

// ListTeamMembers mocks base method
func (m *MockGitHubServiceWithStats) ListTeamMembers(ctx context.Context, orgName string, teamID GitHubTeamID, role GitHubTeamRole) ([]*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembers", ctx, orgName, teamID, role)
	ret0, _ := ret[0].([]*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamMembers indicates an expected call of ListTeamMembers
func (mr *MockGitHubServiceWithStatsMockRecorder) ListTeamMembers(ctx, orgName, teamID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembers", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).ListTeamMembers), ctx, orgName, teamID, role)
}

// CreateTeam mocks base method
func (m *MockGitHubServiceWithStats) CreateTeam(ctx context.Context, orgName string, team *GitHubTeam) (*GitHubTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, orgName, team)
	ret0, _ := ret[0].(*GitHubTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockGitHubServiceWithStatsMockRecorder) CreateTeam(ctx, orgName, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).CreateTeam), ctx, orgName, team)
}

// UpdateTeam mocks base method
func (m *MockGitHubServiceWithStats) UpdateTeam(ctx context.Context, team *GitHubTeam) (*GitHubTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", ctx, team)
	ret0, _ := ret[0].(*GitHubTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam
func (mr *MockGitHubServiceWithStatsMockRecorder) UpdateTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).UpdateTeam), ctx, team)
}

// DeleteTeam mocks base method
func (m *MockGitHubServiceWithStats) DeleteTeam(ctx context.Context, teamID GitHubTeamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam
func (mr *MockGitHubServiceWithStatsMockRecorder) DeleteTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).DeleteTeam), ctx, teamID)
}

// AddTeamMembership mocks base method
func (m *MockGitHubServiceWithStats) AddTeamMembership(ctx context.Context, orgName string, teamID GitHubTeamID, email string, role GitHubTeamRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMembership", ctx, orgName, teamID, email, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTeamMembership indicates an expected call of AddTeamMembership
func (mr *MockGitHubServiceWithStatsMockRecorder) AddTeamMembership(ctx, orgName, teamID, email, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMembership", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).AddTeamMembership), ctx, orgName, teamID, email, role)
}

// DeleteTeamMembership mocks base method
func (m *MockGitHubServiceWithStats) DeleteTeamMembership(ctx context.Context, orgName string, teamID GitHubTeamID, email string, role GitHubTeamRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamMembership", ctx, orgName, teamID, email, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamMembership indicates an expected call of DeleteTeamMembership
func (mr *MockGitHubServiceWithStatsMockRecorder) DeleteTeamMembership(ctx, orgName, teamID, email, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamMembership", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).DeleteTeamMembership), ctx, orgName, teamID, email, role)
}

// AddTeamRepoPermission mocks base method
func (m *MockGitHubServiceWithStats) AddTeamRepoPermission(ctx context.Context, orgName, repoName string, teamID GitHubTeamID, permission RepoPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamRepoPermission", ctx, orgName, repoName, teamID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTeamRepoPermission indicates an expected call of AddTeamRepoPermission
func (mr *MockGitHubServiceWithStatsMockRecorder) AddTeamRepoPermission(ctx, orgName, repoName, teamID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamRepoPermission", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).AddTeamRepoPermission), ctx, orgName, repoName, teamID, permission)
}

// DeleteTeamRepoPermission mocks base method
func (m *MockGitHubServiceWithStats) DeleteTeamRepoPermission(ctx context.Context, orgName, repoName string, teamID GitHubTeamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamRepoPermission", ctx, orgName, repoName, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamRepoPermission indicates an expected call of DeleteTeamRepoPermission
func (mr *MockGitHubServiceWithStatsMockRecorder) DeleteTeamRepoPermission(ctx, orgName, repoName, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamRepoPermission", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).DeleteTeamRepoPermission), ctx, orgName, repoName, teamID)
}

// WalkRepos mocks base method
func (m *MockGitHubServiceWithStats) WalkRepos(ctx context.Context, orgName string, walkFn WalkReposFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkRepos", ctx, orgName, walkFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkRepos indicates an expected call of WalkRepos
func (mr *MockGitHubServiceWithStatsMockRecorder) WalkRepos(ctx, orgName, walkFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRepos", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).WalkRepos), ctx, orgName, walkFn)
}

// WalkReposByTeam mocks base method
func (m *MockGitHubServiceWithStats) WalkReposByTeam(ctx context.Context, orgName string, teamID GitHubTeamID, walkFn WalkReposFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkReposByTeam", ctx, orgName, teamID, walkFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkReposByTeam indicates an expected call of WalkReposByTeam
func (mr *MockGitHubServiceWithStatsMockRecorder) WalkReposByTeam(ctx, orgName, teamID, walkFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkReposByTeam", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).WalkReposByTeam), ctx, orgName, teamID, walkFn)
}

// RepoByName mocks base method
func (m *MockGitHubServiceWithStats) RepoByName(ctx context.Context, orgName, repoName string) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoByName", ctx, orgName, repoName)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoByName indicates an expected call of RepoByName
func (mr *MockGitHubServiceWithStatsMockRecorder) RepoByName(ctx, orgName, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoByName", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).RepoByName), ctx, orgName, repoName)
}

// UpdateRepoTopics mocks base method
func (m *MockGitHubServiceWithStats) UpdateRepoTopics(ctx context.Context, orgName, repoName string, topics []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoTopics", ctx, orgName, repoName, topics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoTopics indicates an expected call of UpdateRepoTopics
func (mr *MockGitHubServiceWithStatsMockRecorder) UpdateRepoTopics(ctx, orgName, repoName, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoTopics", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).UpdateRepoTopics), ctx, orgName, repoName, topics)
}

// ListAdmins mocks base method
func (m *MockGitHubServiceWithStats) ListAdmins(ctx context.Context, orgName string) ([]*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmins", ctx, orgName)
	ret0, _ := ret[0].([]*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmins indicates an expected call of ListAdmins
func (mr *MockGitHubServiceWithStatsMockRecorder) ListAdmins(ctx, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmins", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).ListAdmins), ctx, orgName)
}

// UserByEmail mocks base method
func (m *MockGitHubServiceWithStats) UserByEmail(ctx context.Context, orgName, email string) (*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByEmail", ctx, orgName, email)
	ret0, _ := ret[0].(*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByEmail indicates an expected call of UserByEmail
func (mr *MockGitHubServiceWithStatsMockRecorder) UserByEmail(ctx, orgName, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByEmail", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).UserByEmail), ctx, orgName, email)
}

// UserByLogin mocks base method
func (m *MockGitHubServiceWithStats) UserByLogin(ctx context.Context, orgName, login string) (*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByLogin", ctx, orgName, login)
	ret0, _ := ret[0].(*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByLogin indicates an expected call of UserByLogin
func (mr *MockGitHubServiceWithStatsMockRecorder) UserByLogin(ctx, orgName, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByLogin", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).UserByLogin), ctx, orgName, login)
}

// ZeroStats mocks base method
func (m *MockGitHubServiceWithStats) ZeroStats() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ZeroStats")
}

// ZeroStats indicates an expected call of ZeroStats
func (mr *MockGitHubServiceWithStatsMockRecorder) ZeroStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZeroStats", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).ZeroStats))
}

// Stats mocks base method
func (m *MockGitHubServiceWithStats) Stats() GitHubStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(GitHubStats)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockGitHubServiceWithStatsMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockGitHubServiceWithStats)(nil).Stats))
}
// Code generated by MockGen. DO NOT EDIT.
// Source: target/mockgen/rules.go



// MockRuleEngine is a mock of RuleEngine interface
type MockRuleEngine struct {
	ctrl     *gomock.Controller
	recorder *MockRuleEngineMockRecorder
}

// MockRuleEngineMockRecorder is the mock recorder for MockRuleEngine
type MockRuleEngineMockRecorder struct {
	mock *MockRuleEngine
}

// NewMockRuleEngine creates a new mock instance
func NewMockRuleEngine(ctrl *gomock.Controller) *MockRuleEngine {
	mock := &MockRuleEngine{ctrl: ctrl}
	mock.recorder = &MockRuleEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleEngine) EXPECT() *MockRuleEngineMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRuleEngine) Run(ctx context.Context, org *Org) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRuleEngineMockRecorder) Run(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRuleEngine)(nil).Run), ctx, org)
}

// Add mocks base method
func (m *MockRuleEngine) Add(r Rule) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", r)
}

// Add indicates an expected call of Add
func (mr *MockRuleEngineMockRecorder) Add(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRuleEngine)(nil).Add), r)
}

// MockRule is a mock of Rule interface
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
}

// MockRuleMockRecorder is the mock recorder for MockRule
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRule) Run(ctx context.Context, org *Org) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRuleMockRecorder) Run(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRule)(nil).Run), ctx, org)
}

// MockRuleError is a mock of RuleError interface
type MockRuleError struct {
	ctrl     *gomock.Controller
	recorder *MockRuleErrorMockRecorder
}

// MockRuleErrorMockRecorder is the mock recorder for MockRuleError
type MockRuleErrorMockRecorder struct {
	mock *MockRuleError
}

// NewMockRuleError creates a new mock instance
func NewMockRuleError(ctrl *gomock.Controller) *MockRuleError {
	mock := &MockRuleError{ctrl: ctrl}
	mock.recorder = &MockRuleErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleError) EXPECT() *MockRuleErrorMockRecorder {
	return m.recorder
}

// Description mocks base method
func (m *MockRuleError) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description
func (mr *MockRuleErrorMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockRuleError)(nil).Description))
}

// ConstraintViolations mocks base method
func (m *MockRuleError) ConstraintViolations() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintViolations")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConstraintViolations indicates an expected call of ConstraintViolations
func (mr *MockRuleErrorMockRecorder) ConstraintViolations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintViolations", reflect.TypeOf((*MockRuleError)(nil).ConstraintViolations))
}

// Link mocks base method
func (m *MockRuleError) Link() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link")
	ret0, _ := ret[0].(string)
	return ret0
}

// Link indicates an expected call of Link
func (mr *MockRuleErrorMockRecorder) Link() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockRuleError)(nil).Link))
}

// Error mocks base method
func (m *MockRuleError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockRuleErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockRuleError)(nil).Error))
}
